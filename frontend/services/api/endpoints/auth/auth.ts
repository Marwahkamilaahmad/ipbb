/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  APIMessage,
  AuthVerificationParams,
  BodyAuthLogin,
  HTTPValidationError,
  RefreshTokenRequest,
  RegisterRequest,
  TokenResponse,
  UserRead
} from '../../models';

import { clientFetcher } from '../../../../lib/orval/mutator';
import type { ErrorType , BodyType } from '../../../../lib/orval/mutator';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * @summary Register
 */
export const authRegister = (
    registerRequest: BodyType<RegisterRequest>,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<UserRead>(
    {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerRequest
    },
    options);
  }



export const getAuthRegisterMutationFetcher = ( options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, { arg }: { arg: RegisterRequest }): Promise<UserRead> => {
    return authRegister(arg, options);
  }
}
export const getAuthRegisterMutationKey = () => [`/auth/register`] as const;

export type AuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authRegister>>>
export type AuthRegisterMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Register
 */
export const useAuthRegister = <TError = ErrorType<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof authRegister>>, TError, Key, RegisterRequest, Awaited<ReturnType<typeof authRegister>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAuthRegisterMutationKey();
  const swrFn = getAuthRegisterMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Login
 */
export const authLogin = (
    bodyAuthLogin: BodyType<BodyAuthLogin>,
 options?: SecondParameter<typeof clientFetcher>) => {const formUrlEncoded = new URLSearchParams();
if(bodyAuthLogin.grant_type !== undefined && bodyAuthLogin.grant_type !== null) {
 formUrlEncoded.append(`grant_type`, bodyAuthLogin.grant_type)
 }
formUrlEncoded.append(`username`, bodyAuthLogin.username)
formUrlEncoded.append(`password`, bodyAuthLogin.password)
if(bodyAuthLogin.scope !== undefined) {
 formUrlEncoded.append(`scope`, bodyAuthLogin.scope)
 }
if(bodyAuthLogin.client_id !== undefined && bodyAuthLogin.client_id !== null) {
 formUrlEncoded.append(`client_id`, bodyAuthLogin.client_id)
 }
if(bodyAuthLogin.client_secret !== undefined && bodyAuthLogin.client_secret !== null) {
 formUrlEncoded.append(`client_secret`, bodyAuthLogin.client_secret)
 }

    return clientFetcher<TokenResponse>(
    {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
    options);
  }



export const getAuthLoginMutationFetcher = ( options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, { arg }: { arg: BodyAuthLogin }): Promise<TokenResponse> => {
    return authLogin(arg, options);
  }
}
export const getAuthLoginMutationKey = () => [`/auth/login`] as const;

export type AuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authLogin>>>
export type AuthLoginMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Login
 */
export const useAuthLogin = <TError = ErrorType<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof authLogin>>, TError, Key, BodyAuthLogin, Awaited<ReturnType<typeof authLogin>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAuthLoginMutationKey();
  const swrFn = getAuthLoginMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Google Redirect
 */
export const authGoogleRedirect = (
    
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/auth/oauth/google/redirect`, method: 'GET'
    },
    options);
  }



export const getAuthGoogleRedirectKey = () => [`/auth/oauth/google/redirect`] as const;

export type AuthGoogleRedirectQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleRedirect>>>
export type AuthGoogleRedirectQueryError = ErrorType<unknown>

/**
 * @summary Google Redirect
 */
export const useAuthGoogleRedirect = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof authGoogleRedirect>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAuthGoogleRedirectKey() : null);
  const swrFn = () => authGoogleRedirect(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Google Callback
 */
export const authGoogleCallback = (
    
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/auth/oauth/google/callback`, method: 'GET'
    },
    options);
  }



export const getAuthGoogleCallbackKey = () => [`/auth/oauth/google/callback`] as const;

export type AuthGoogleCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleCallback>>>
export type AuthGoogleCallbackQueryError = ErrorType<unknown>

/**
 * @summary Google Callback
 */
export const useAuthGoogleCallback = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof authGoogleCallback>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAuthGoogleCallbackKey() : null);
  const swrFn = () => authGoogleCallback(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Me
 */
export const authMe = (
    
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<UserRead>(
    {url: `/auth/me`, method: 'GET'
    },
    options);
  }



export const getAuthMeKey = () => [`/auth/me`] as const;

export type AuthMeQueryResult = NonNullable<Awaited<ReturnType<typeof authMe>>>
export type AuthMeQueryError = ErrorType<unknown>

/**
 * @summary Me
 */
export const useAuthMe = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof authMe>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAuthMeKey() : null);
  const swrFn = () => authMe(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Refresh
 */
export const authRefresh = (
    refreshTokenRequest: BodyType<RefreshTokenRequest>,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<TokenResponse>(
    {url: `/auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenRequest
    },
    options);
  }



export const getAuthRefreshMutationFetcher = ( options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, { arg }: { arg: RefreshTokenRequest }): Promise<TokenResponse> => {
    return authRefresh(arg, options);
  }
}
export const getAuthRefreshMutationKey = () => [`/auth/refresh`] as const;

export type AuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof authRefresh>>>
export type AuthRefreshMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Refresh
 */
export const useAuthRefresh = <TError = ErrorType<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof authRefresh>>, TError, Key, RefreshTokenRequest, Awaited<ReturnType<typeof authRefresh>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAuthRefreshMutationKey();
  const swrFn = getAuthRefreshMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Verification
 */
export const authVerification = (
    params: AuthVerificationParams,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/auth/verification`, method: 'POST',
        params
    },
    options);
  }



export const getAuthVerificationMutationFetcher = (params: AuthVerificationParams, options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, __: { arg: Arguments }): Promise<unknown> => {
    return authVerification(params, options);
  }
}
export const getAuthVerificationMutationKey = (params: AuthVerificationParams,) => [`/auth/verification`, ...(params ? [params]: [])] as const;

export type AuthVerificationMutationResult = NonNullable<Awaited<ReturnType<typeof authVerification>>>
export type AuthVerificationMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Verification
 */
export const useAuthVerification = <TError = ErrorType<HTTPValidationError>>(
  params: AuthVerificationParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof authVerification>>, TError, Key, Arguments, Awaited<ReturnType<typeof authVerification>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAuthVerificationMutationKey(params);
  const swrFn = getAuthVerificationMutationFetcher(params, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Logout
 */
export const authLogout = (
    
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<APIMessage>(
    {url: `/auth/logout`, method: 'POST'
    },
    options);
  }



export const getAuthLogoutMutationFetcher = ( options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, __: { arg: Arguments }): Promise<APIMessage> => {
    return authLogout(options);
  }
}
export const getAuthLogoutMutationKey = () => [`/auth/logout`] as const;

export type AuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof authLogout>>>
export type AuthLogoutMutationError = ErrorType<unknown>

/**
 * @summary Logout
 */
export const useAuthLogout = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof authLogout>>, TError, Key, Arguments, Awaited<ReturnType<typeof authLogout>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAuthLogoutMutationKey();
  const swrFn = getAuthLogoutMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
